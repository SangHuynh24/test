Terms explain:
- A commit is a record of what files you have changed since the last time you made a commit. 
- 

Use git.bash terminal for Windows:

############## Local ############################3
Step 1: Create a local git repository

#Check current working directory:
$ pwd

#Change directory:
$ cd ~/Desktop

# Create new folder:

$ mkdir myproject

# To initialize a (local) git repository:
$ git init

Step 2: Add a new file to the repo

#Check the list of file in folder:
$ls

#Create a new file sang.txt:
$touch sang.txt

Step 3: Add a new file to the staging environment:
# Check which files git knows exist - check status of working tree
$git status

"Hey, we noticed you created a new file called mnelson.txt
, but unless you use the 'git add' command we aren't going to do anything with it."

# Add a new file to the staging environment:
$git add <filename>
$git add *.html
$git add .


#Remove file from staging environment:
$git rm --cached <filename>


# Configuration - Configure Git:
To start using Git from your computer, you’ll need to enter your credentials (user name and email) to identify you as the author of your work. 
The user name and email should match the ones you’re using on GitLab.

$git config --local user.name 'Yourusername'
$git config --local user.email 'Youremail'

By default, git config will write to a local level if no configuration option is passed. 
Local level configuration is applied to the context repository git config gets invoked in. 
Local configuration values are stored in a file that can be found in the repo's .git directory: .git/config

or

$git config --global user.name 'Yourusername'
$git config --global user.email 'Youremail'

Global level configuration is user-specific, meaning it is applied to an operating system user. 
Global configuration values are stored in a file that is located in a user's home directory. ~ /.gitconfig on unix systems and C:\Users\<username>\.gitconfig on windows


To check the configuration, run:
$git config --global --list => only show username/useremail 

or: 
$git config --list => show list of all settings (username/useremail)

The --global option tells Git to always use this information for anything you do on your system. If you omit --global or use --local
, the configuration will be applied only to the current repository.





Step 4: Create a commit - commit changes in index
$git commit
Initial commit
type ":wq" and Enter

$git commit -m "This is my first commit!"


Step 5: Create a new branch

Say you want to make a new feature but are worried about 
making changes to the main project while developing the feature. This is where git branches come in. 

# Create new branch in local (local branch name)
$git checkout -b <my branch name>

# Push new branch (created above) to Remote:
$git push <Remote_name> <localbranch_name>

or
$git push <Remote_name> <local_branchname>:<remote_branchname

# To check the available branch in the remote git:
$git branch -r


Step 6: Create a new repository on Github
If you only want to keep track of your code locally, you don't need to use GitHub.
But if you want to work with a team, you can use GitHub to collaboratively modify the project's code.

To create a new repo on GitHub, log in and go to the GitHub home page. 
You should see a green '+ New repository' button:

# Push to remote repository
$ git push -u <Remote_name> <localbranch_name>

# Pull latest from remote repository
$ git pull

# Clone Repository into a new Directory:
$git clone


##################### Github############################

#See list of remote repository:
$ git remote

# add new remote repository:
git remote add origin git@github.com:SangHuynh24/test.git

#If the permission is denied, follow the below link to solve it:
https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

passphrase key: 241092

# check SSH key whether exists or not:
$ ssh -T git@github.com

######## Update files to Github (remmber choose branch):
Step1: add file in to staging environment
$git add . (add all files)

Step 2: commit these files
$git commit -m 'Message'

Step 3: push these files to github
$git push 

DONE!

######## If you want to clone files from Github:
Step1: copy clone link on github (for SSH)
Step2:
- open Gitbash at the folder where we want to save cloned files.
- $git clone git@github.com:SangHuynh24/test.git

DONE!

######## Pull request (PR)

#### Merge a PR:
Go ahead and click the green 'Merge pull request' button. 
This will merge your changes into the master branch.


### Add new remote:
$ git remote add github git@github.com:ppreyer/first_app.git

### Update remote:
$ git remote set-url origin git@github.com:ppreyer/first_app.git

############## Gitlab ##########################
##generating an SSH key pair:
ssh-keygen -t rsa -b 2048 -C "email@example.com"

Enter file in which to save the key (/home/demo/.ssh/id_rsa): press Enter to use default file
or add path of new file - /home/demo/.ssh/yourcustomefile

# start the ssh-agent in the background
$ eval $(ssh-agent -s)

# Adding your SSH key to ssh-agent:
$ ssh-add ~/.ssh/id_rsa

or $ ssh-add ~/.ssh/<yourcustomefile>

#Copy RSA keys:
 clip < ~/.ssh/id_rsa.pub

#remember to add SSH keys to account on Gitlab by pasting:



# Testing that everything is set up correctly:
ssh -T git@gitlab.com

############## Step to push a new commit ###################
$git initial
$git add .
$git status
$git commit -m "message"
$git push -u ......